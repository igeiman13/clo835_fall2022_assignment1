name: Deploy to ECR

on: 
  push:
    branches: [ development ]
  pull_request:
    branches: [ master ]
    types: [closed]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push MySQL image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1-ecr
        #IMAGE_TAG: v0.2
      run: |
        # Generate IMAGE_TAG using current date and time
        IMAGE_TAG=mysql-$(date +"%Y%m%d%H%M%S")
        echo "IMAGE_TAG: $IMAGE_TAG"
        

        ls -ltra
        # Docker build for mysql server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:"MySQL_${IMAGE_TAG}" -f Dockerfile_mysql .
        # Unit test
        docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=pw -d $ECR_REGISTRY/$ECR_REPOSITORY:"MySQL_${IMAGE_TAG}"
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        docker exec mysql -ppw -e "show databases;"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:"MySQL_${IMAGE_TAG}"
        
    - name: Build, test, tag, and push WebAPP image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1-ecr
        #IMAGE_TAG: v0.2
      run: |
        # Generate IMAGE_TAG using current date and time
        IMAGE_TAG=WebAPP-$(date +"%Y%m%d%H%M%S")
        echo "IMAGE_TAG: $IMAGE_TAG"
        

        ls -ltra
        # Docker build for mysql server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:"WebAPP_${IMAGE_TAG}" -f Dockerfile .
        # Unit test
        export DBHOST=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql`
        echo $DBHOST
        export DBPORT=3306
        export DBUSER=root
        export DATABASE=employees
        export DBPWD=pw
        export APP_COLOR=blue
        docker run -p 8080:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPWD -e DATABASE=$DATABASE -e APP_COLOR=$APP_COLOR -d $ECR_REGISTRY/$ECR_REPOSITORY:"WebAPP_${IMAGE_TAG}"
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        curl 127.0.0.1:8080
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:"WebAPP_${IMAGE_TAG}"